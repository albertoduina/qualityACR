package qualityACR;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertAll;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import ij.IJ;
import ij.ImageJ;

public class GeometricAccuracyTest {

	@Before
	public void setUp() throws Exception {
		new ImageJ(ImageJ.NORMAL);
	}

	@After
	public void tearDown() throws Exception {
		// new WaitForUserDialog("Do something, then click OK.").show();

	}

	@Test
	public final void testVertexFinder() {

		int[][] matin = { { 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28,
				28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40,
				41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48,
				48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52,
				53, 53, 54, 54, 55, 55, 56, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 63, 64, 64,
				65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77, 77,
				78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 86, 86, 87, 87, 88, 88, 88, 89, 89, 90,
				90, 91, 91, 92, 92, 93, 93, 94, 94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 100, 101, 101,
				102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 107, 108, 108, 109, 109, 110, 110, 111, 111,
				112, 112, 113, 113, 113, 114, 114, 115, 115, 116, 116, 117, 117, 118, 118, 119, 119, 119, 120, 120, 121,
				121, 122, 122, 123, 123, 124, 124, 125, 125, 125, 126, 126, 127, 127, 128, 128, 129, 129, 130, 130, 131,
				131, 131, 132, 132, 133, 133, 134, 134, 135, 135, 136, 136, 137, 137, 137, 138, 138, 139, 139, 140, 140,
				141, 141, 142, 142, 143, 143, 143, 144, 144, 145, 145, 146, 146, 147, 147, 148, 148, 149, 149, 149, 150,
				150, 150, 150, 150, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 152, 152, 152, 152, 152, 152, 152,
				152, 153, 153, 153, 153, 153, 153, 153, 153, 154, 154, 154, 154, 154, 154, 154, 154, 155, 155, 155, 155,
				155, 156, 156, 157, 157, 158, 158, 159, 159, 160, 160, 161, 161, 162, 162, 163, 163, 164, 164, 165, 165,
				165, 166, 166, 166, 166, 166, 166, 166, 166, 167, 167, 167, 167, 167, 167, 167, 167, 167, 168, 168 },
				{ 87, 92, 87, 88, 89, 90, 91, 92, 84, 85, 86, 80, 92, 80, 81, 82, 83, 79, 75, 92, 75, 76, 77, 78, 75,
						92, 75, 93, 93, 76, 93, 76, 93, 76, 93, 76, 93, 76, 94, 76, 94, 76, 94, 77, 94, 77, 94, 77, 94,
						77, 94, 77, 94, 77, 95, 95, 78, 95, 77, 95, 73, 74, 73, 72, 67, 95, 67, 68, 69, 70, 71, 64, 65,
						66, 61, 95, 61, 62, 63, 56, 57, 58, 59, 60, 55, 95, 55, 54, 50, 96, 50, 51, 52, 53, 96, 49, 48,
						96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 97, 48, 97, 48, 97, 97, 49, 97, 49, 97, 49, 97, 49, 97,
						49, 98, 49, 98, 98, 50, 98, 50, 98, 50, 98, 50, 98, 50, 98, 50, 51, 99, 99, 51, 99, 51, 99, 51,
						99, 51, 99, 51, 52, 100, 100, 52, 100, 52, 100, 52, 100, 52, 100, 52, 53, 101, 101, 53, 101, 53,
						101, 53, 101, 53, 101, 53, 102, 53, 102, 102, 54, 102, 54, 102, 54, 102, 54, 102, 54, 103, 54,
						103, 103, 55, 103, 55, 103, 55, 103, 55, 103, 55, 104, 55, 104, 55, 104, 104, 56, 104, 56, 104,
						56, 104, 56, 104, 56, 105, 56, 105, 105, 57, 105, 57, 105, 57, 105, 57, 105, 57, 106, 57, 106,
						57, 106, 106, 58, 106, 58, 106, 58, 106, 58, 107, 58, 107, 58, 107, 107, 59, 107, 59, 107, 59,
						107, 59, 108, 59, 108, 108, 60, 108, 60, 108, 60, 108, 60, 108, 60, 109, 60, 109, 60, 109, 109,
						61, 109, 61, 109, 61, 109, 61, 110, 61, 110, 61, 110, 110, 62, 110, 62, 110, 62, 110, 62, 111,
						62, 111, 62, 111, 62, 111, 111, 63, 111, 63, 111, 63, 112, 63, 112, 93, 91, 112, 92, 63, 89, 94,
						63, 90, 86, 63, 87, 112, 88, 85, 80, 84, 112, 81, 79, 82, 64, 83, 73, 76, 64, 77, 74, 78, 112,
						75, 68, 72, 112, 69, 67, 70, 64, 71, 66, 64, 112, 65, 64, 95, 113, 113, 95, 96, 113, 96, 113,
						96, 113, 96, 113, 96, 114, 114, 96, 97, 114, 97, 113, 114, 110, 107, 111, 112, 108, 106, 109,
						97, 101, 99, 102, 105, 103, 100, 104, 97, 105, 97, 98 } };

		int width = 190;
		int height = 190;
		boolean verbose = true;

		int[][] rotated = ACRutils.matRotate(matin);

		int[][] matout = ACRlocalizer.vertexFinder(rotated, width, height, verbose);

		ACRlog.logMatrix(matout, ACRlog.qui() + "matout");

		int[][] matexpected = { { 51, 155, 165, 26 }, { 48, 64, 114, 92 } };

		assertTrue(ACRutils.compareMatrix(matout, matexpected, "OK"));

	}

}
